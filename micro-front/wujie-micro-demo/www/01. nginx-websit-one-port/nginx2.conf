欢迎使用 Pod 调试功能，通过模拟终端的方式，方便快速进入容器进行调试。(注意：默认连接的 Shell 为 Bash)
/ # bash 
/bin/sh: bash: not found
/ # cat /etc/nginx/nginx.conf
#user  nobody;
worker_processes  4;
worker_rlimit_nofile 65535;
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
#pid        logs/nginx.pid;
# 环境变量
env GATEWAY_HOST;
env XXL_JOB_HOST;
env PAGE_EDITOR;
env KIBANA_HOST;
# 加载模块信息
load_module modules/ngx_http_perl_module.so;
events {
    use epoll;
    worker_connections  204800;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
    #access_log  logs/access.log  main;
    sendfile        on;
    #tcp_nopush     on;
    #keepalive_timeout  0;
    keepalive_timeout  65;
    #gzip  on;
    gzip on;
    gzip_min_length  1000;
    gzip_buffers     4 8k;   
    gzip_http_version 1.1; 
    gzip_types       text/plain application/x-javascript text/css application/xml application/javascript application/json;
    client_header_buffer_size 4k; 
   
    #运用perl获取环境变量赋值
        perl_set $GATEWAY_HOST 'sub { return $ENV{"GATEWAY_HOST"}; }';
        perl_set $PAGE_EDITOR 'sub { return $ENV{"PAGE_EDITOR"}; }';
    perl_set $XXL_JOB_HOST 'sub { return $ENV{"XXL_JOB_HOST"}; }';
        perl_set $KIBANA_HOST 'sub { return $ENV{"KIBANA_HOST"}; }';
        #perl_set $GATEWAY_HOST_2 'sub { return $ENV{"GATEWAY_HOST_2"}; }';
        #perl_set $GATEWAY_HOST_3 'sub { return $ENV{"GATEWAY_HOST_3"}; }';

        #配置反向代理gateway路径
    #upstream gateway {
    #    server 10.0.66.232:19020 weight=1 max_fails=3 fail_timeout=10s;
    #    server 10.0.66.239:19020 weight=1 max_fails=3 fail_timeout=15s;
    #    server 10.0.66.233:19020 weight=1 max_fails=3 fail_timeout=15s;
    #}
    server {
        listen       80;
        server_name  localhost;
        client_body_buffer_size 50m;
        client_max_body_size 100m;
        #charset koi8-r;
 
        #access_log  logs/host.access.log  main;
        # k8s解析使用，GATEWAY_HOST定义为k8s内部地址需要添加下面的dns配置
        # resolver kube-dns.kube-system.svc.cluster.local valid=5s;
        # 前端配置
            location / {
               # 避免浏览器缓存
               if ($request_filename ~* .*\.(?:htm|html)$)
           {
              add_header Cache-Control no-cache;
              add_header Cache-Control private;
           }
            
            root /var/www;
                try_files $uri $uri/ @router;
            index  index.html index.htm;
            #nginx对于静态文件的处理模块，开启后会寻找以.gz结尾的文件，直接返回，不会占用cpu进行压缩。如果找不到则不进行压缩。
            gzip_static on;
            # #决定是否开启gzip模块，on表示开启，off表示关闭；
            # gzip on;
            # #设置允许压缩的页面最小字节(从header头的Content-Length中获取) ，当返回内容大于此值时才会使用gzip进行压缩,以K为单位,当值为0时，所有页面都进行压缩。建议大于1k
            # gzip_min_length 1k;
            # #设置gzip申请内存的大小,其作用是按块大小的倍数申请内存空间,param2:int(k) 后面单位是k。这里设置以16k为单位,按照原始数据大小以16k为单位的4倍申请内存
            # gzip_buffers 4 16k;
            # #识别http协议的版本,早起浏览器可能不支持gzip自解压,用户会看到乱码
            # gzip_http_version 1.1;
            # #设置gzip压缩等级，等级越底压缩速度越快文件压缩比越小，反之速度越慢文件压缩比越大；等级1-9，最小的压缩最快 但是消耗cpu，建议为6
            # gzip_comp_level 6;
            # #设置需要压缩的MIME类型,非设置值不进行压缩，即匹配压缩类型
            # gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript image/jpeg image/gif image/png;
            # #启用应答头"Vary: Accept-Encoding"
            # gzip_vary on;
            # #配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）
            # gzip_disable "MSIE [1-6]\.";   
        }
            location @router {
            rewrite ^.*$ /index.html last;
        }
        # 后端接口配置
        location /api/ {
            proxy_set_header Host $http_host;
            proxy_connect_timeout 600s;
            proxy_send_timeout 600s;
            proxy_read_timeout 600s;
            #proxy_pass http://gateway;
            proxy_pass http://$GATEWAY_HOST;
            # base项目前端适配，去掉请求中的/api/信息
            rewrite "^/api/(.*)$" /$1 break;
        }
        location /page-editor  {                                                                                                                                 
            proxy_set_header Host $http_host;                                                                                                            
            proxy_connect_timeout 600s;                                                                                                                  
            proxy_send_timeout 600s;                                                                                                                     
            proxy_read_timeout 600s;                                                                                                                     
            proxy_pass http://$PAGE_EDITOR;                                                                                                             
            # base......................................./api/......                                                                                     
            rewrite "^/page-editor/(.*)$" /$1 break;                                                                                                             
        } 
        location /icpx_0001/ {
            alias /var/icpx_0001;
            try_files $uri $uri/ /icpx_0001/index.html last;
            index  index.html index.htm;
            #nginx对于静态文件的处理模块，开启后会寻找以.gz结尾的文件，直接返回，不会占用cpu进行压缩。如果找不到则不进行压缩。
            gzip_static on;
           # rewrite "^/icpx_0001(.*)$" /$1 break;
        }
        #error_page  404              /404.html;
        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
        location /xxl-job-admin {
            proxy_pass http://$XXL_JOB_HOST;
            # proxy_pass http://10.3.61.244:55598/xxl-job-admin/;
        } 
        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}
        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}
        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }
    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;
    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    server {
        listen       5601;
        server_name  localhost;
        location / {
            proxy_pass http://$KIBANA_HOST;
        }
    }
    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;
    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;
    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    #include nginx_gateway.conf;
    # include nginx_vm.conf;
}
/ # 