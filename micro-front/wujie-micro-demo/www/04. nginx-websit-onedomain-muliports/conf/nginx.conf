
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    gzip on;
    gzip_min_length  1000;
    gzip_buffers     4 8k;   
    gzip_http_version 1.1; 
    gzip_types       text/plain application/x-javascript text/css application/xml application/javascript application/json;


    upstream react_server {
        server 127.0.0.1:8000;
    }

    server {
        listen       80;
        server_name  www.httpdemo.cn;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location @router {
            rewrite ^.*$ /index.html last;
        }

        # location = /app-react {
        #     root html/main/app-react;
        #     try_files $uri $uri/ @router;
        #     index  index.html index.htm;
        #     #nginx对于静态文件的处理模块，开启后会寻找以.gz结尾的文件，直接返回，不会占用cpu进行压缩。如果找不到则不进行压缩。
        #     gzip_static on;
        #     #rewrite "^/app-react(.*)$" /$1 break;
        # }

        # location /app-react/ {
        #     root html/main/app-react;
        #     try_files $uri $uri/ @router;
        #     index  index.html index.htm;
        #     #nginx对于静态文件的处理模块，开启后会寻找以.gz结尾的文件，直接返回，不会占用cpu进行压缩。如果找不到则不进行压缩。
        #     gzip_static on;
        #     rewrite "^/app-react(.*)$" /$1 break;
        # }


        location / {
            root   html/main;
            index  index.html index.htm;
            try_files $uri $uri/ /index.html;
            gzip_static on;
            #try_files $uri $uri/ /index.html; #解决页面刷新404问题
            #rewrite ^(.*)$ https://$host$1 permanent;
        }

        # 子应用：使用打包base: app-react/
        location /app-react {
            alias html/app-react/;
            try_files $uri $uri/ /app-react/index.html last;
            index  index.html index.htm;
            #nginx对于静态文件的处理模块，开启后会寻找以.gz结尾的文件，直接返回，不会占用cpu进行压缩。如果找不到则不进行压缩。
            gzip_static on;
            # rewrite "^/app-react(.*)$" /$1 break;
        }


        # 子应用 使用代理: 无法正确加载静态资源
        location ^~ /app-react-server/ {
            proxy_pass          http://127.0.0.1:8000;
            proxy_redirect      off;
            proxy_set_header    Host $host;
            proxy_set_header    X-Real-IP $remote_addr;
            proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # 使用代理2
        location /react-server/ {
            proxy_pass      http://react_server;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}


    }


    # server {
    #     listen       8081;
    #     server_name  localhost2;

    #     #charset koi8-r;

    #     #access_log  logs/host.access.log  main;

    #     location / {
    #         root   html/module/app-react;
    #         index  index.html index.htm;
    #         try_files $uri $uri/ /index.html; #解决页面刷新404问题
    #     }


    #     #error_page  404              /404.html;

    #     # redirect server error pages to the static page /50x.html
    #     #
    #     error_page   500 502 503 504  /50x.html;
    #     location = /50x.html {
    #         root   html;
    #     }


    # }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

    server {
       listen       8000;
       #server_name  www.httpdemo.cn;
       server_name 127.0.0.1;

       add_header 'Access-Control-Allow-Origin' '*' always;
       add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE' always;
       add_header 'Access-Control-Allow-Headers' '*' always;

       location / {
           root   html/app-react-server;
           index  index.html index.htm;
           try_files           $uri $uri/ /index.html;
           gzip_static on;
       }

        location ^~ /app-react-server/ {
            alias               html/app-react-server/;
            index               index.html index.htm;
            try_files           $uri /app-react-server/index.html;
        }

    }


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    server {
        charset      utf-8,gbk; # windows 服务器下设置后，依然乱码，暂时无解
        listen       9000;
        server_name  127.0.0.1;

        location / {
            alias  docs/;
            #allow all;

            autoindex on;# 显示目录
            autoindex_exact_size on;# 显示文件大小
            autoindex_localtime on;# 显示文件时间
        }

    }

}
